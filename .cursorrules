You are an expert in Laravel, PHP, Javascript and related web development technologies.

Key Principles
- Write concise, technical responses with accurate PHP examples.
- Follow Laravel best practices and conventions.
- Use object-oriented programming with a focus on SOLID principles.
- Prefer iteration and modularization over duplication.
- Use descriptive variable and method names.
- Use lowercase with dashes for directories (e.g., app/Http/Controllers).
- Favor dependency injection and service containers.

PHP/Laravel
- Use PHP 8.2+ features when appropriate (e.g., typed properties, match expressions).
- Follow PSR-12 coding standards.
- Use strict typing: declare(strict_types=1);
- Utilize Laravel's built-in features and helpers when possible.
- Use the new Laravel 11 app layout without Kernel, etc. as this has been deprecated.
- File structure: Follow Laravel's directory structure and naming conventions.
- Implement proper error handling and logging:
  - Use Laravel's exception handling and logging features.
  - Create custom exceptions when necessary.
  - Use try-catch blocks for expected exceptions.
- Use Laravel's validation features for form and request validation.
- Implement middleware for request filtering and modification.
- Utilize Laravel's Eloquent ORM for database interactions.
- Use Laravel's query builder for complex database queries.
- Implement proper database migrations and seeders.

Vue 3 with Composition API
- Use `<script setup>` for defining components.
- Utilize Composition API for state management and lifecycle hooks.
- Use `defineProps` and `defineEmits` for props and events.
- Leverage `ref` and `computed` for reactive state and derived state.
- Follow Vue 3 best practices for component structure and organization.

Inertia.js
- Use Inertia.js for server-side rendering and navigation.
- Implement proper routing and API endpoints.
- Follow Inertia.js best practices for component structure and organization.

Dependencies
- Laravel (latest stable version)
- Composer for dependency management

Laravel Best Practices
- Use Eloquent ORM instead of raw SQL queries when possible.
- Implement Repository pattern for data access layer.
- Use Laravel's built-in authentication and authorization features.
- Utilize Laravel's caching mechanisms for improved performance.
- Implement job queues for long-running tasks.
- Use Laravel's built-in testing tools (PHPUnit, Dusk) for unit and feature tests.
- Implement API versioning for public APIs.
- Use Laravel's localization features for multi-language support.
- Implement proper CSRF protection and security measures.
- Use Laravel Mix for asset compilation.
- Implement proper database indexing for improved query performance.
- Use Laravel's built-in pagination features.
- Implement proper error logging and monitoring.

Key Conventions
1. Follow Laravel's MVC architecture.
2. Use Laravel's routing system for defining application endpoints.
3. Implement proper request validation using Form Requests.
4. Use Laravel's Blade templating engine for views.
5. Implement proper database relationships using Eloquent.
6. Use Laravel's built-in authentication scaffolding.
7. Implement proper API resource transformations.
8. Use Laravel's event and listener system for decoupled code.
9. Implement proper database transactions for data integrity.
10. Use Laravel's built-in scheduling features for recurring tasks.

This is the current file structure of the project:

scorchOS/
├── app/
│   ├── Http/
│   │   ├── Controllers/
│   │   └── Middleware/
│   ├── Models/
├── resources/
│   ├── js/
│   │   └── pages/
│   ├── lang/
│   │   ├── en/
│   │   └── de/
│   └── views/
├── database/
│   ├── migrations/
│   └── seeders/
├── tests/
│   ├── Feature/
│   └── Unit/
├── storage/
│   └── app/
│       └── public/
└── public/
    └── build/

1. File Creation Rules:
    Rules:
    - All new files added to the project should be added to the .cursorrules file structure.

2. Agent Rules:
    - New Project Features should be added in an Agile manner, one slice at a time.
    - When editing an existing function in a file, you must think about the other objects and functions that depend on it.
    - Don't remove commented out Log statements unless stated otherwise.

3. Chat & Composer Continuity:
    - When a composer or chat is becoming so long that the AI models are having trouble keeping up I will simply give the command "Agent Refresh" to prompt you to create a concise prompt that gives the full context of the project what's been done and what we are currently working on. If there are bugs you will explain them as best you can.

4. Functional Outline Rules:
    - The .functional_outline file must be updated when:
      - A new major function is added to the app
      - An existing function's behavior is significantly changed
      - Note: Bug fixes and minor tweaks do not require updates
    - When starting a new chat or composer session, always read the .functional_outline file first to understand the current state and functionality of the app
    - The outline should be kept in a clear, hierarchical format with major sections numbered and subsections properly indented
    - Until a function is verified as working and complete it should be noted in the functional outline as "In Progress".